{"ast":null,"code":"import _taggedTemplateLiteral from \"/private/josas/workspace/neqsim/web/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  {\\n    calculations {\\n      id\\n      ship {\\n        id\\n        name\\n        country\\n      }\\n      fluid {\\n        id\\n        nitrogen {\\n          value\\n          unit\\n        }\\n        methane {\\n          value\\n          unit\\n        }\\n        ethane {\\n          value\\n          unit\\n        }\\n        propane {\\n          value\\n          unit\\n        }\\n        iButane {\\n          value\\n          unit\\n        }\\n        nButane {\\n          value\\n          unit\\n        }\\n        iPentane {\\n          value\\n          unit\\n        }\\n        nPentane {\\n          value\\n          unit\\n        }\\n        nHexane {\\n          value\\n          unit\\n        }\\n      }\\n      transport {\\n        id\\n        volume\\n        pressure\\n        boilOffRate\\n        fromDate\\n        toDate\\n      }\\n      standard {\\n        id\\n        combustionTemperature\\n        measurementTemperature\\n        idealGasReferenceState\\n      }\\n    }\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { gql } from 'apollo-boost';\nconst CALCULATIONS_QUERY = gql(_templateObject());\nexport const ResultsPage = () => {\n  const _useQuery = useQuery(CALCULATIONS_QUERY),\n        loading = _useQuery.loading,\n        error = _useQuery.error,\n        data = _useQuery.data;\n\n  if (loading) {\n    return 'Loading';\n  }\n\n  if (error) {\n    return error;\n  }\n\n  console.log(data);\n  return data;\n};","map":{"version":3,"sources":["/private/josas/workspace/neqsim/web/src/app/pages/ResultsPage.tsx"],"names":["useQuery","gql","CALCULATIONS_QUERY","ResultsPage","loading","error","data","console","log"],"mappings":";;;;;;;;;;;;AACA,SAAQA,QAAR,QAAuB,qBAAvB;AACA,SAAQC,GAAR,QAAkB,cAAlB;AAGA,MAAMC,kBAAkB,GAAGD,GAAH,mBAAxB;AAkEA,OAAO,MAAME,WAAoC,GAAG,MAAM;AAAA,oBACzBH,QAAQ,CAACE,kBAAD,CADiB;AAAA,QACjDE,OADiD,aACjDA,OADiD;AAAA,QACxCC,KADwC,aACxCA,KADwC;AAAA,QACjCC,IADiC,aACjCA,IADiC;;AAExD,MAAIF,OAAJ,EAAa;AACX,WAAO,SAAP;AACD;;AACD,MAAIC,KAAJ,EAAW;AACT,WAAOA,KAAP;AACD;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,SAAQA,IAAR;AACD,CAVM","sourcesContent":["import React from 'react';\nimport {useQuery} from '@apollo/react-hooks';\nimport {gql} from 'apollo-boost';\nimport {Simulate} from 'react-dom/test-utils';\n\nconst CALCULATIONS_QUERY = gql`\n  {\n    calculations {\n      id\n      ship {\n        id\n        name\n        country\n      }\n      fluid {\n        id\n        nitrogen {\n          value\n          unit\n        }\n        methane {\n          value\n          unit\n        }\n        ethane {\n          value\n          unit\n        }\n        propane {\n          value\n          unit\n        }\n        iButane {\n          value\n          unit\n        }\n        nButane {\n          value\n          unit\n        }\n        iPentane {\n          value\n          unit\n        }\n        nPentane {\n          value\n          unit\n        }\n        nHexane {\n          value\n          unit\n        }\n      }\n      transport {\n        id\n        volume\n        pressure\n        boilOffRate\n        fromDate\n        toDate\n      }\n      standard {\n        id\n        combustionTemperature\n        measurementTemperature\n        idealGasReferenceState\n      }\n    }\n  }\n`;\n\nexport const ResultsPage: React.FunctionComponent = () => {\n  const {loading, error, data} = useQuery(CALCULATIONS_QUERY);\n  if (loading) {\n    return 'Loading';\n  }\n  if (error) {\n    return error;\n  }\n  console.log(data);\n  return (data);\n};"]},"metadata":{},"sourceType":"module"}